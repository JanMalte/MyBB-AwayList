<?xml version="1.0" encoding="UTF-8" ?>
<project name="MyBB AwayList" default="all">
	<!-- http://jenkins-php.org/ http://sebastian-bergmann.de/archives/911-Debugging-with-Git-and-PHPUnit.html 
		http://www.phpunit.de/manual/2.3/de/phing.html -->
	<property name="project" value="MyBB AwayList" />
	<property name="sourcedir" value="." />
	<property name="builddir" value="build" />

	<property name="phpunitreportstyledir" value="/usr/share/php/data/phing/etc/" />

	<property name="seleniumDir" value="${builddir}/logs/selenium" />
	<property name="seleniumRCServer"
		value="'${sourcedir}/tests-selenium/selenium-server-standalone-2.0b3.jar'" />
	<property name="cmdSeleniumRCStart"
		value="env DISPLAY=:8 java -jar ${seleniumRCServer} -debug -browserSideLog -ensureCleanSession -port 6666 >>${seleniumDir}/selenium.log 2>>${seleniumDir}/selenium.err.log &amp;" />
	<property name="cmdSeleniumRCStop"
		value="ps -ef | grep -v grep | grep selenium | awk {'print $2'} | xargs kill; sleep 2" />
	<property name="cmdXServerStart"
		value="Xvfb :8 -screen 0 1280x1024x24 >>${seleniumDir}/selenium_xvfb.log 2>>${seleniumDir}/selenium_xvfb.err.log &amp;" />
	<property name="cmdXServerStop"
		value="ps -ef | grep -v grep | grep Xvfb | awk {'print $2'} | xargs kill; sleep 2" />
	<property name="cmdDisplayExport" value="env DISPLAY=:8" />

	<fileset dir="${sourcedir}" id="application">
		<include name="source/**/*.php" />
	</fileset>

	<!-- Clen up last build -->
	<target name="clean" description="Remove the previous existing build directories">
		<echo msg="Clean ..." />
		<delete dir="${builddir}" />
	</target>

	<!-- stopping the daemons for Selenium testing -->
	<target name="tearDown">
		<exec command="${cmdXServerStop}" />
		<exec command="${cmdSeleniumRCStop}" />
	</target>

	<!-- Prepare build process -->
	<target name="prepare" description="Prepare the build directories"
		depends="clean">
		<echo msg="Prepare ${project} ..." />
		<mkdir dir="${builddir}" />
		<mkdir dir="${builddir}/logs" />
		<mkdir dir="${builddir}/logs/xml" />
		<mkdir dir="${builddir}/logs/selenium" />
		<mkdir dir="${builddir}/logs/phpunit" />
		<mkdir dir="${builddir}/logs/coverage" />
		<mkdir dir="${builddir}/logs/checkstyle" />
		<mkdir dir="${builddir}/logs/pdepend" />
		<mkdir dir="${builddir}/docs" />
		<mkdir dir="${builddir}/code-browser" />
		<mkdir dir="${seleniumDir}" />
		<mkdir dir="${seleniumDir}/screenshots" />
	</target>
	
	<!-- setting up the daemons for Selenium testing -->
	<target name="setUp" depends="prepare">
		<echo msg="Starting up all daemons..." />
		<exec command="${cmdXServerStart}" spawn="false" />
		<exec command="${cmdSeleniumRCStart}" />

		<echo msg="Waiting for daemons to be up..." />
		<exec command="sleep 20" />
	</target>

	<!-- The PhpLintTask checks syntax (lint) on one or more PHP source code 
		files. -->
	<target name="lint"
		description="The PhpLintTask checks syntax (lint) on one or more PHP source code files."
		depends="prepare">
		<echo msg="PhpLintTask for ${project} ..." />
		<phplint deprecatedAsError="true" haltOnFailure="true"
			tofile="${builddir}/logs/phplint_syntax_errors.txt">
			<fileset refid="application" />
		</phplint>
		<!-- <jsllint> <fileset dir="."> <include name="**/*.js"/> </fileset> </jsllint> -->
	</target>

	<!-- This task runs testcases using the PHPUnit framework. It is a functional 
		port of the Ant JUnit task. -->
	<target name="unittests"
		description="This task runs testcases using the PHPUnit framework."
		depends="setUp">

		<echo msg="PHP Unit Tests for ${project} ..." />
		<exec
			command="phpunit --log-junit ${builddir}/logs/xml/phpunit.xml 
			--coverage-clover ${builddir}/logs/xml/coverage-clover.xml 
			--coverage-html ${builddir}/logs/coverage/
			${sourcedir}/tests/"
			logoutput="TRUE" passthru="TRUE" escape="FALSE" checkreturn="false"
			returnProperty="unittestFailed" />
		<echo msg="PHPUnitReport for ${project} ..." />
		<phpunitreport infile="${builddir}/logs/xml/phpunit.xml"
			format="frames" todir="${builddir}/logs/phpunit/" styledir="${phpunitreportstyledir}" />
		<echo msg="PHPUnitReport for ${project} generated." />

		<echo msg="Selenium PHP Unit Tests for ${project} ..." />
		<exec
			command="phpunit --log-junit ${builddir}/logs/xml/phpunit_selenese.xml 
			${sourcedir}/tests-selenium/"
			logoutput="TRUE" passthru="TRUE" escape="FALSE" checkreturn="false"
			returnProperty="unittestSeleniumFailed" />

		<!--<phpunit printsummary="true" codecoverage="true" failureproperty="unittestFailed" 
			errorproperty="unittestError"> <formatter todir="${reportDir}/phpunit" usefile="true" 
			outfile="phpUnitReport.xml" type="xml"/> <batchtest> <fileset refid="testFiles" 
			/> </batchtest> </phpunit> -->

	</target>

	<!-- phploc is a tool for quickly measuring the size of a PHP project. -->
	<target name="phploc"
		description="phploc is a tool for quickly measuring the size of a PHP project"
		depends="prepare">
		<echo msg="PHP Loc for ${project} ..." />
		<exec
			command="phploc
			--log-csv ${builddir}/logs/phploc.csv
			--log-xml ${builddir}/logs/xml/phploc.xml
			${sourcedir}" />
	</target>

	<!-- This task runs PHP_Depend, a software analyzer and metric tool for 
		PHP Code. You need an installed version of this software to use this task. -->
	<target name="pdepend"
		description="Generate jdepend.xml and software metrics charts using PHP_Depend"
		depends="prepare">
		<echo msg="PhpDependTask for ${project} ..." />
		<phpdepend haltonerror="true">
			<fileset refid="application" />
			<logger type="jdepend-chart" outfile="${builddir}/logs/pdepend/jdepend-chart.svg" />
			<logger type="jdepend-xml" outfile="${builddir}/logs/pdepend/jdepend.xml" />
			<logger type="overview-pyramid" outfile="${builddir}/logs/pdepend/overview-pyramid.svg" />
			<logger type="phpunit-xml" outfile="${builddir}/logs/pdepend/phpunit-xml.xml" />
			<logger type="summary-xml" outfile="${builddir}/logs/pdepend/jdepend_summary.xml" />
			<analyzer type="coderank-mode" value="method" />
		</phpdepend>
	</target>

	<!-- This task runs phpmd, a Project Mess Detector (PMD) for PHP Code. You 
		need an installed version of this software to use this task. -->
	<target name="md"
		description="This task runs phpmd, a Project Mess Detector (PMD) for PHP Code."
		depends="prepare">
		<echo msg="PHPMDTask for ${project} ..." />
		<phpmd allowedFileExtensions="php,phtml">
			<fileset refid="application" />
			<formatter type="html" outfile="${builddir}/logs/pmd.html" />
			<formatter type="xml" outfile="${builddir}/logs/xml/pmd.xml" />
		</phpmd>
	</target>

	<!-- This task runs PHP_CodeSniffer to detect violations of a defined set 
		of coding standards. Phing needs a patch for CodeSniffer: http://www.phing.info/trac/ticket/642 -->
	<target name="phpcs" description="Generate checkstyle.xml using PHP_CodeSniffer"
		depends="prepare">
		<echo msg="PhpCodeSnifferTask for ${project} ..." />
		<phpcodesniffer docGenerator="HTML"
			docFile="${builddir}/logs/checkstyle/doc.html" standard="Zend"
			showSniffs="true" showWarnings="true" haltonerror="false">
			<fileset refid="application"/>
			<formatter type="xml" outfile="${builddir}/logs/xml/checkstyle.xml" />
			<formatter type="checkstyle"
				outfile="${builddir}/logs/checkstyle/checkstyle.xml" />
			<formatter type="summary" outfile="${builddir}/logs/checkstyle/summary.txt" />
		</phpcodesniffer>
	</target>

	<!-- This task runs phpcpd, a Copy/Paste Detector (CPD) for PHP Code. You 
		need an installed version of this software to use this task. -->
	<target name="cpd"
		description="This task runs phpcpd, a Copy/Paste Detector (CPD) for PHP Code."
		depends="prepare">
		<echo msg="PHPCPDTask for ${project} ..." />
		<phpcpd minLines="3" minTokens="20">
			<fileset refid="application" />
			<formatter type="pmd" outfile="${builddir}/logs/xml/cpd.xml" />
			<formatter type="default" outfile="${builddir}/logs/cpd.txt" />
		</phpcpd>
                <exec command="sleep 60" />
	</target>

	<!-- This task runs phpDocumentor, an auto-documentation tool for PHP similar 
		to Javadoc. -->
	<target name="phpdoc"
		description="This task runs phpDocumentor, an auto-documentation tool for PHP similar to Javadoc."
		depends="prepare">
		<echo msg="PhpDocumentorTask for ${project} ..." />
		<phpdoc title="API Documentation for ${project}" destdir="${builddir}/docs"
			sourcecode="true" quiet="true" output="HTML:Smarty:PHP">
			<fileset refid="application" />
		</phpdoc>
	</target>

	<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser"
		depends="prepare">
		<echo msg="PHP Code Browser for ${project} ..." />
		<exec
			command="phpcb --log ${builddir}/logs
				--source ${sourcedir}/source/
				--output ${builddir}/code-browser" />
	</target>

	<!-- run all reports and tests -->
	<target name="all"
		depends="clean,prepare,setUp,lint,unittests,phploc,pdepend,md,cpd,phpdoc,phpcb">
                    <!--clean,prepare,setUp,lint,unittests,phploc,pdepend,md,phpcs,cpd,phpdoc,phpcb-->
			<phingCall target="tearDown" />
			<if>
				<or>
					<equals arg1="${unittestFailed}" arg2="1" />
					<equals arg1="${unittestSeleniumFailed}" arg2="1" />
				</or>
				<then>
					<fail
						message="Unittests have failed! See ${builddir}/logs/xml/phpunit.xml or console output for more details" />
				</then>
				<else>
					<echo msg="Unittests are OK!" />
				</else>
			</if>
			<if>
				<or>
					<equals arg1="${unittestCoverFailed}" arg2="1" />
					<equals arg1="${unittestSeleniumCoverFailed}" arg2="1" />
				</or>
				<then>
					<fail
						message="Building Code Coverage for Unittests has failed! See ${builddir}/logs/xml/phpunit.xml or console output for more details" />
				</then>
				<else>
					<echo msg="Building Code Coverage for Unittests OK!" />
				</else>
			</if>
	</target>
	
	   <!-- run all reports and tests -->
    <target name="testing"
        depends="unittests">
            <phingCall target="tearDown" />
            <if>
                <or>
                    <equals arg1="${unittestFailed}" arg2="1" />
                    <equals arg1="${unittestSeleniumFailed}" arg2="1" />
                </or>
                <then>
                    <fail
                        message="Unittests have failed! See ${builddir}/logs/xml/phpunit.xml or console output for more details" />
                </then>
                <else>
                    <echo msg="Unittests are OK!" />
                </else>
            </if>
            <if>
                <or>
                    <equals arg1="${unittestCoverFailed}" arg2="1" />
                    <equals arg1="${unittestSeleniumCoverFailed}" arg2="1" />
                </or>
                <then>
                    <fail
                        message="Building Code Coverage for Unittests has failed! See ${builddir}/logs/xml/phpunit.xml or console output for more details" />
                </then>
                <else>
                    <echo msg="Building Code Coverage for Unittests OK!" />
                </else>
            </if>
    </target>
	
	   <!-- run all reports and tests -->
    <target name="stats"
        depends="clean,prepare,setUp,lint,unittests,phploc,pdepend,md,phpcs,cpd,phpdoc,phpcb">
        <exec command="ant -buildfile sonar.xml sonar >> ${builddir}/logs/sonar.log 2>> ${builddir}/logs/sonar-error.log" />
            <phingCall target="tearDown" />
            <if>
                <or>
                    <equals arg1="${unittestFailed}" arg2="1" />
                    <equals arg1="${unittestSeleniumFailed}" arg2="1" />
                </or>
                <then>
                    <fail
                        message="Unittests have failed! See ${builddir}/logs/xml/phpunit.xml or console output for more details" />
                </then>
                <else>
                    <echo msg="Unittests are OK!" />
                </else>
            </if>
            <if>
                <or>
                    <equals arg1="${unittestCoverFailed}" arg2="1" />
                    <equals arg1="${unittestSeleniumCoverFailed}" arg2="1" />
                </or>
                <then>
                    <fail
                        message="Building Code Coverage for Unittests has failed! See ${builddir}/logs/xml/phpunit.xml or console output for more details" />
                </then>
                <else>
                    <echo msg="Building Code Coverage for Unittests OK!" />
                </else>
            </if>
    </target>

</project>